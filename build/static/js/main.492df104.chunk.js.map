{"version":3,"sources":["redux/services/getAxiosClient.js","components/UserHeader.js","redux/actions/index.js","constants/actionTypes.js","components/PostList.js","components/App.js","redux/reducers/index.js","redux/reducers/postReducer.js","redux/reducers/userReducer.js","index.js"],"names":["axios","create","baseURL","UserHeader","this","props","fetchUser","userId","user","className","name","React","Component","connect","state","ownProps","users","find","id","dispatch","a","async","getAxiosClient","get","response","type","payload","data","PostList","fetchPosts","postData","map","key","title","body","renderBlogList","posts","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"gQAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCCLC,E,4LAEFC,KAAKC,MAAMC,UAAUF,KAAKC,MAAME,U,+BAGxB,IACAC,EAASJ,KAAKC,MAAdG,KAER,OAAKA,EAGE,yBAAKC,UAAU,UAAUD,EAAKE,MAF5B,S,GATYC,IAAMC,WAqBhBC,eANS,SAACC,EAAOC,GAC9B,MAAO,CACLP,KAAMM,EAAME,MAAMC,MAAK,SAAAT,GAAI,OAAIA,EAAKU,KAAOH,EAASR,aAIhB,CAAED,UCZjB,SAAAY,GAAE,OAAI,SAAMC,GAAN,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAENE,EAAeC,IAAf,gBAA4BL,KAFtB,OAEvBM,EAFuB,OAI7BL,EAAS,CACPM,KCjBsB,aDkBtBC,QAASF,EAASG,OANS,wCDYhBd,CAAwCV,GGnBjDyB,E,4LAEFxB,KAAKC,MAAMwB,e,uCAIX,OAAOzB,KAAKC,MAAMyB,SAASC,KAAI,SAAAJ,GAC7B,OACE,yBAAKlB,UAAU,OAAOuB,IAAKL,EAAKT,IAC9B,uBAAGT,UAAU,mCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAKkB,EAAKM,OACV,2BAAIN,EAAKO,OAEX,kBAAC,EAAD,CAAY3B,OAAQoB,EAAKpB,gB,+BAQjC,OACE,oCACE,yBAAKE,UAAU,2BAA2BL,KAAK+B,uB,GAzBhCxB,IAAMC,WAqCdC,eANQ,SAAAC,GACrB,MAAO,CACLgB,SAAUhB,EAAMsB,SAImB,CAAEP,WFvCf,kBAAM,SAAMV,GAAN,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACPE,EAAeC,IAAI,WADZ,OACxBC,EADwB,OAG9BL,EAAS,CACPM,KCRuB,cDSvBC,QAASF,EAASG,OALU,wCEuCjBd,CAAwCe,GChCxCS,EARH,WACV,OACE,yBAAK5B,UAAU,gBACb,kBAAC,EAAD,Q,QCFS6B,cAAgB,CAC7BF,MCHa,WAAyB,IAAxBtB,EAAuB,uDAAf,GAAIyB,EAAW,uCACrC,OAAQA,EAAOd,MACb,IJJuB,cIKrB,OAAOc,EAAOb,QAEhB,QACE,OAAOZ,IDFXE,MEJa,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIyB,EAAW,uCACrC,OAAQA,EAAOd,MACb,ILHsB,aKIpB,MAAM,GAAN,mBAAWX,GAAX,CAAkByB,EAAOb,UAE3B,QACE,OAAOZ,M,QCEP0B,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.492df104.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchUser } from \"../redux/actions\";\r\n\r\nclass UserHeader extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchUser(this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n\r\n    if (!user) {\r\n      return null;\r\n    }\r\n    return <div className=\"header\">{user.name}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    user: state.users.find(user => user.id === ownProps.userId)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchUser })(UserHeader);\r\n","import getAxiosClient from \"../services/getAxiosClient\";\r\n\r\nimport { FETCH_POSTS, FETCH_USER } from \"../../constants/actionTypes\";\r\n\r\nexport const fetchPosts = () => async dispatch => {\r\n  const response = await getAxiosClient.get(\"/posts\");\r\n\r\n  dispatch({\r\n    type: FETCH_POSTS,\r\n    payload: response.data\r\n  });\r\n};\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n  debugger;\r\n  const response = await getAxiosClient.get(`users/${id}`);\r\n\r\n  dispatch({\r\n    type: FETCH_USER,\r\n    payload: response.data\r\n  });\r\n};\r\n","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const FETCH_USER = \"FETCH_USER\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../redux/actions\";\r\n\r\nimport UserHeader from \"./UserHeader\";\r\n\r\nclass PostList extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  renderBlogList() {\r\n    return this.props.postData.map(data => {\r\n      return (\r\n        <div className=\"item\" key={data.id}>\r\n          <i className=\"large middle aligned icon user\" />\r\n          <div className=\"content\">\r\n            <div className=\"description\">\r\n              <h2>{data.title}</h2>\r\n              <p>{data.body}</p>\r\n            </div>\r\n            <UserHeader userId={data.userId} />\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"ui relaxed divided list\">{this.renderBlogList()}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToPros = state => {\r\n  return {\r\n    postData: state.posts\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToPros, { fetchPosts })(PostList);\r\n","import React from \"react\";\r\nimport PostList from \"./PostList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"ui container\">\r\n      <PostList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nexport default combineReducers({\r\n  posts: postReducer,\r\n  users: userReducer\r\n});\r\n","import { FETCH_POSTS } from \"../../constants/actionTypes\";\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { FETCH_USER } from \"../../constants/actionTypes\";\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case FETCH_USER:\r\n      return [...state, action.payload];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./redux/reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}